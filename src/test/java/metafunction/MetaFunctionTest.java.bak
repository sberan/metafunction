package metafunction;

import junit.framework.Assert;
import org.junit.Test;

public class MetaFunctionTest {

    public static class FunctionApplier extends FunctionApplier_MetaFunction {
        MetaFunction<String> route;

        @MetaMethod public void of(MetaFunction<String> function) {
            route = function;
        }

        public String apply(Object... args) {
            return route.apply(args);
        }
    }

    public static class FunctionAsserter extends FunctionAsserter_MetaFunction {
        @MetaMethod public FunctionAsserter assertThat(MetaFunction<String> fn) {
            return this;
        }

        public FunctionAsserter isEqualTo(Object... args) {
            return this;
        }
    }

    @Test public void testVoidMetaFunction() {
        FunctionApplier fn = new FunctionApplier();

        fn.of(() -> "yo");

        Assert.assertEquals("yo", fn.apply());
    }

    @Test public void testAllTheArities() {

        new FunctionAsserter()

                .assertThat((String s) -> "yo")
                    .isEqualTo("yo");
    }
    //TODO: test different return types/argument types
    //TODO: test multiple/incorrect @MetaMethod parameter types, clashing @MetaMethod defs
    //TODO: test MetaMethod not public
    //TODO: static methods
}
